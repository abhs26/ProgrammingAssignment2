inv
return(inv)
return(inv)
data <- x$get();
x
}
inv
return(inv)
return(inver)
}
inv = x$getinv()
# if the inverse has already been calculated
if (!is.null(inv)){
# get it from the cache and skips the computation.
message("getting cached data")
message("getting cached data")
message("getting cached data")
source('~/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
}
}
}
}
}
}
# otherwise, calculates the inverse
mat.data = x$get()
inv = solve(mat.data, ...)
# sets the value of the inverse in the cache via the setinv function.
x$setinv(inv)
return(inv)
}
}
print(dur)
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
return(inv)
}
inv <- x$getinverse()
inv <- solve(data)
x$setinverse(inv)
return(inv)
}
